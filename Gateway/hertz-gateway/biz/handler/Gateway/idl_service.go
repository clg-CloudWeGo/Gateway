// Code generated by hertz generator.

package Gateway

import (
	"context"

	Gateway "Gateway/biz/model/Gateway"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// AddService .
// @router /add [POST]
func AddService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req Gateway.ServiceInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(Gateway.SuccessResp)

	//todo
	//the method to add the service
	resp = &Gateway.SuccessResp{
		Success: true,
		Message: "Add " + req.ServiceName + " successfully!!",
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteService .
// @router /delete [POST]
func DeleteService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req Gateway.ServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(Gateway.SuccessResp)

	//todo
	//the method to delete the service
	resp = &Gateway.SuccessResp{
		Success: true,
		Message: "Delete " + req.ServiceName + " success",
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdateService .
// @router /update [POST]
func UpdateService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req Gateway.ServiceInfo
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(Gateway.SuccessResp)

	//todo
	//the method to update the service
	resp = &Gateway.SuccessResp{
		Success: true,
		Message: "Update " + req.ServiceName + " success",
	}
	c.JSON(consts.StatusOK, resp)
}

// GetService .
// @router /get [POST]
func GetService(ctx context.Context, c *app.RequestContext) {
	var err error
	var req Gateway.ServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(Gateway.ServiceInfo)
	//todo
	//the method to get the service
	c.JSON(consts.StatusOK, resp)
}

// ListService .
// @router /list [POST]
func ListService(ctx context.Context, c *app.RequestContext) {
	var err error
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new([]*Gateway.ServiceInfo)
	//todo
	//the method to show all the service

	c.JSON(consts.StatusOK, resp)
}
